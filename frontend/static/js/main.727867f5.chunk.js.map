{"version":3,"sources":["__hack/global_state.ts","components/Header/Header.tsx","components/MainMenu/BlockMenu.tsx","common/data_fetch.ts","components/MainMenu/Items/PropertyItem.tsx","components/MainMenu/Items/SelectItem.tsx","components/MainMenu/Items/TextItem.tsx","components/common/RusDatePicker.tsx","components/MainMenu/Items/DateItem.tsx","common/utils.ts","components/MainMenu/StrainSavingForm.tsx","components/MicroorganismsCatalog/MicroorganismsCatalog.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalState","state","update","Header","onMenuButtonClick","active","isMenuButtonActive","className","onClick","BlockMenu","items","activeItem","onChoose","map","id","label","MenuItem","isActive","find","item","defaultTimeout","timeoutMsg","timeout","getConfig","timeoutErrorMessage","getAllStrains","a","axios","get","response","data","getStrain","getAllGenera","getAllStrainTypes","getAllPropertiesWithParameters","PropertyItem","props","title","children","SelectItem","useState","nanoid","cssId","htmlFor","name","value","onChange","e","onSelectChange","target","text","TextItem","type","RusDatePicker","locale","ru","dateFormat","rest","DateItem","selected","Date","date","toISOString","split","dateToIso","StrainSavingForm","strain","onSubmit","onBaseFieldChanged","fieldName","forceUpdate","isLoading","genusList","typeList","collectionIndex","dateReceiving","source","dateAdded","obtainingMethod","properties","res","console","log","strainId","this","setState","Promise","all","genus","requestError","message","toString","sender","parseInt","filter","property","propertyName","ungroupedParameters","param","FieldFromParam","_","groups","group","style","border","parameters","groupId","propertyId","React","Component","formalParameter","parameterDataType","MicroorganismsCatalog","strainList","getAllTypes","JSON","stringify","blockMenuItems","i","App","onMenuItemChoose","activeMenuItem","prevState","isBlockMenuActive","defaults","baseURL","chooseScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.727867f5.chunk.js","sourcesContent":["export default class GlobalState {\r\n  static state: { update: () => void } = {update: ()=> {}}\r\n}","interface Props {\r\n    onMenuButtonClick: () => void;\r\n    isMenuButtonActive: boolean;\r\n}\r\n\r\nexport default function Header({ onMenuButtonClick, isMenuButtonActive }: Props) {\r\n    const active = isMenuButtonActive ? ' active' : '';\r\n\r\n    return (\r\n        <header className='header container'>\r\n            <div className='header__content header-content'>\r\n                <div\r\n                    className={'header__menu-button menu-button' + active}\r\n                    onClick={onMenuButtonClick}\r\n                >\r\n                    Меню\r\n                </div>\r\n                <div className='header__title'>Добавление штамма</div>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport interface ItemInfo {\r\n    id: number;\r\n    label: string;\r\n}\r\ninterface BlockMenuProps {\r\n    items: ItemInfo[];\r\n    activeItem: ItemInfo;\r\n    onChoose: (item: ItemInfo) => void;\r\n}\r\n\r\nexport default function BlockMenu({ items, activeItem, onChoose }: BlockMenuProps) {\r\n    return (\r\n        <div className='main-content__menu'>\r\n            <div className='menu'>\r\n                {items.map(({ id, label }) => (\r\n                    <MenuItem\r\n                        key={id}\r\n                        label={label}\r\n                        isActive={id === activeItem.id}\r\n                        onClick={() => onChoose(items.find((item) => item.id === id)!)}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MenuItemProps {\r\n    label: string;\r\n    isActive: boolean;\r\n    onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\r\n}\r\n\r\nfunction MenuItem({ label, isActive, onClick }: MenuItemProps) {\r\n    const active = isActive ? ' active' : '';\r\n\r\n    return (\r\n        <div onClick={onClick} className={'menu__item menu-item' + active}>\r\n            <div className='menu-item__text item-text'>\r\n                <span>{label}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from 'axios';\r\nimport Strain, { Genus, StrainType } from '../models/strain/strain';\r\n\r\nconst defaultTimeout = 30000;\r\nconst timeoutMsg = (timeout: number) => `истекло время ожидания (${timeout / 1000}с)`;\r\nconst getConfig = (timeout: number) => ({\r\n    timeout,\r\n    timeoutErrorMessage: timeoutMsg(timeout),\r\n});\r\n\r\nexport async function getAllStrains(timeout: number = defaultTimeout) {\r\n    const response = await axios.get<Strain[]>(`/strain`, getConfig(timeout));\r\n    return response.data;\r\n}\r\n\r\nexport async function getStrain(id: number, timeout: number = defaultTimeout) {\r\n    const response = await axios.get<Strain>(`/strain/${id}`, getConfig(timeout));\r\n    return response.data;\r\n}\r\n\r\nexport async function getAllGenera(timeout: number = defaultTimeout) {\r\n    const response = await axios.get<Genus[]>(`/strain-genus`, getConfig(timeout));\r\n    return response.data;\r\n}\r\n\r\nexport async function getAllStrainTypes(timeout: number = defaultTimeout) {\r\n    const response = await axios.get<StrainType[]>(`/strain-type`, getConfig(timeout));\r\n    return response.data;\r\n}\r\n\r\n// property/with_parameters\r\n\r\nexport async function getAllPropertiesWithParameters(timeout: number = defaultTimeout) {\r\n    const response = await axios.get<StrainType[]>(\r\n        `/property/with_parameters`,\r\n        getConfig(timeout)\r\n    );\r\n    return response.data;\r\n}\r\n\r\n// export async function getGenusTypeMap(timeout: number = defaultTimeout) {\r\n//     const [types, genera] = await Promise.all([\r\n//         getAllStrainTypes(timeout),\r\n//         getAllGenera(timeout),\r\n//     ]);\r\n\r\n//     console.log(genera);\r\n\r\n//     const genusToTypeMap = new Map(\r\n//         genera.map((genus) => [genus.id, { genus, types: [] as Type[] }])\r\n//     );\r\n\r\n//     for (let type of types) {\r\n//         const item = genusToTypeMap.get(type.genus.id)!;\r\n//         item.types.push(type);\r\n//     }\r\n\r\n//     return genusToTypeMap;\r\n// }\r\n","interface Props {\r\n    title: string;\r\n    // params: { name: string; type: string }[];\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport default function PropertyItem(props: Props) {\r\n    return (\r\n        <div className='property'>\r\n            <div className='property__title'>\r\n                <span>{props.title}</span>\r\n            </div>\r\n            {/* <TextItem label={'Параметр'} /> */}\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n","import { nanoid } from 'nanoid/non-secure';\r\nimport { useState } from 'react';\r\n\r\ninterface Props {\r\n    name?: string;\r\n    label: string;\r\n    items: { text: string; value: string }[];\r\n    activeItem?: string;\r\n    onSelectChange: (sender: HTMLSelectElement) => void;\r\n}\r\n\r\nexport default function SelectItem(props: Props) {\r\n    const [cssId] = useState(nanoid());\r\n\r\n    return (\r\n        <div className='strain-form__item form__field'>\r\n            <label htmlFor={cssId} className='strain-form__label form-label'>\r\n                {props.label}\r\n            </label>\r\n            <select\r\n                name={props.name}\r\n                value={props.activeItem}\r\n                onChange={(e) => props.onSelectChange(e.target)}\r\n                id={cssId}\r\n                className='strain-form__input form-input'\r\n            >\r\n                {props.items.map(({ text, value }) => (\r\n                    <option key={value} value={value}>\r\n                        {text}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n","import { nanoid } from 'nanoid/non-secure';\r\nimport { useState } from 'react';\r\n\r\ninterface Props<STR extends string | undefined> {\r\n    name: STR;\r\n    label: string;\r\n    value: string;\r\n    onChange: (value: string, fieldName: STR) => void;\r\n}\r\n\r\nexport default function TextItem<STR extends string | undefined>(props: Props<STR>) {\r\n    const [cssId] = useState(nanoid());\r\n\r\n    return (\r\n        <div className='strain-form__item form__field'>\r\n            <label htmlFor={cssId} className='strain-form__label form-label'>\r\n                {props.label}\r\n            </label>\r\n            <input\r\n                name={props.name}\r\n                value={props.value}\r\n                onChange={(e) => props.onChange(e.target.value, e.target.name as STR)}\r\n                id={cssId}\r\n                type='text'\r\n                className='strain-form__input form-input'\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\nimport ru from 'date-fns/locale/ru';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nexport default function RusDatePicker(props: ReactDatePickerProps) {\r\n    const { locale = ru, dateFormat = 'dd.MM.yyyy', ...rest } = props;\r\n    return <DatePicker locale={locale} dateFormat={dateFormat} {...rest} />;\r\n}\r\n","import { nanoid } from 'nanoid/non-secure';\r\nimport React, { useState } from 'react';\r\nimport { dateToIso } from '../../../common/utils';\r\nimport RusDatePicker from '../../common/RusDatePicker';\r\n\r\ninterface Props<STR extends string | undefined> {\r\n    name: STR;\r\n    label: string;\r\n    value: string;\r\n    onChange: (value: string, fieldName: STR) => void;\r\n}\r\n\r\nexport default function DateItem<STR extends string | undefined>(props: Props<STR>) {\r\n    const [cssId] = useState(nanoid());\r\n\r\n    return (\r\n        <div className='strain-form__item form__field'>\r\n            <label htmlFor={cssId} className='strain-form__label form-label'>\r\n                {props.label}\r\n            </label>\r\n            <RusDatePicker\r\n                name={props.name}\r\n                selected={props.value === '' ? new Date() : new Date(props.value)}\r\n                onChange={(date) => props.onChange(dateToIso(date as Date), props.name)}\r\n                id={cssId}\r\n                className='strain-form__input form-input'\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","export function delay(ms: number) {\r\n    return new Promise((resolve, _reject) => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n\r\nexport function dateToIso(date: Date) {\r\n    return date.toISOString().split('T')[0];\r\n}\r\n","import React from 'react';\r\nimport Strain, { FacticalParameter, Genus, StrainType } from '../../models/strain/strain';\r\nimport RequestError from '../../common/request_error';\r\nimport {\r\n    getAllGenera,\r\n    getAllPropertiesWithParameters,\r\n    getAllStrainTypes,\r\n    getStrain,\r\n} from '../../common/data_fetch';\r\nimport PropertyItem from './Items/PropertyItem';\r\nimport SelectItem from './Items/SelectItem';\r\nimport TextItem from './Items/TextItem';\r\nimport DateItem from './Items/DateItem';\r\n\r\ninterface Props {\r\n    strainId?: number;\r\n}\r\n\r\ninterface State {\r\n    requestError?: RequestError;\r\n    isLoading: boolean;\r\n\r\n    genusList: Genus[];\r\n    typeList: StrainType[];\r\n\r\n    genus?: Genus;\r\n    type?: StrainType;\r\n}\r\n\r\n/**\r\n * add or edit strain\r\n */\r\nexport default class StrainSavingForm extends React.Component<Props, State> {\r\n    private strain: Strain;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            genusList: [],\r\n            typeList: [],\r\n        };\r\n\r\n        this.strain = {\r\n            name: '',\r\n            collectionIndex: '',\r\n            dateReceiving: '',\r\n            source: '',\r\n            dateAdded: '',\r\n            obtainingMethod: '',\r\n            properties: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const res = await getAllPropertiesWithParameters();\r\n        console.log('all props:', res);\r\n\r\n        const { strainId } = this.props;\r\n        this.setState({ isLoading: true });\r\n\r\n        try {\r\n            const [genusList, typeList, strain] = await (strainId\r\n                ? Promise.all([getAllGenera(), getAllStrainTypes(), getStrain(strainId)])\r\n                : Promise.all([getAllGenera(), getAllStrainTypes()]));\r\n\r\n            this.setState({ genusList, typeList });\r\n            if (strain) {\r\n                this.strain = strain;\r\n                this.setState({ genus: strain.type?.genus });\r\n                this.forceUpdate();\r\n            }\r\n        } catch (error) {\r\n            this.setState({ requestError: error });\r\n        }\r\n\r\n        this.setState({ isLoading: false });\r\n    }\r\n\r\n    private onSubmit = (e: React.FormEvent<HTMLFormElement>) => {};\r\n\r\n    private onBaseFieldChanged = (value: string, fieldName: string) => {\r\n        const strain: any = this.strain;\r\n        const field = fieldName as keyof Strain;\r\n\r\n        strain[field] = value;\r\n        this.forceUpdate();\r\n    };\r\n\r\n    render() {\r\n        const { isLoading, requestError } = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Загрузка данных...</p>;\r\n        }\r\n\r\n        if (requestError) {\r\n            return `Ошибка при получении данных: ${requestError.message}`;\r\n        }\r\n\r\n        const { genusList, typeList, genus } = this.state;\r\n        const strain = this.strain;\r\n\r\n        // return (\r\n        //     <div>\r\n        //         штамм\r\n        //         <pre>{JSON.stringify(strain, null, 2)}</pre>\r\n        //     </div>\r\n        // );\r\n\r\n        return (\r\n            <div className='strain-adding'>\r\n                <form\r\n                    onSubmit={this.onSubmit}\r\n                    className='strain-form form--position-block-center'\r\n                >\r\n                    <SelectItem\r\n                        label='Род'\r\n                        items={genusList.map((genus) => ({\r\n                            text: genus.name,\r\n                            value: genus.id.toString(),\r\n                        }))}\r\n                        activeItem={genus?.id.toString()}\r\n                        onSelectChange={(sender) => {\r\n                            const id = parseInt(sender.value, 10);\r\n                            const genus = genusList.find((genus) => id === genus.id);\r\n\r\n                            if (strain.type?.genus.id !== genus?.id) {\r\n                                delete strain.type;\r\n                            }\r\n                            this.setState({ genus });\r\n                            this.forceUpdate();\r\n                        }}\r\n                    />\r\n                    <SelectItem\r\n                        label='Вид'\r\n                        items={typeList\r\n                            .filter((type) => type.genus.id === genus?.id)\r\n                            .map((type) => ({\r\n                                text: type.name,\r\n                                value: type.id.toString(),\r\n                            }))}\r\n                        activeItem={strain.type?.id.toString()}\r\n                        onSelectChange={(sender) => {\r\n                            const id = parseInt(sender.value, 10);\r\n                            strain.type = typeList.find((type) => id === type.id);\r\n                            this.forceUpdate();\r\n                        }}\r\n                    />\r\n                    <TextItem\r\n                        label='Исхродный индекс' // часть наименования\r\n                        name='name'\r\n                        value={strain.name}\r\n                        onChange={this.onBaseFieldChanged}\r\n                    />\r\n                    <DateItem\r\n                        label='Дата получения'\r\n                        name='dateReceiving'\r\n                        value={strain.dateReceiving}\r\n                        onChange={this.onBaseFieldChanged}\r\n                    />\r\n                    <TextItem\r\n                        label='Индекс штаммов' // каталожный номер\r\n                        name='collectionIndex'\r\n                        value={strain.collectionIndex}\r\n                        onChange={this.onBaseFieldChanged}\r\n                    />\r\n                    <TextItem\r\n                        label='Происхождение' // происхождение\r\n                        name='source'\r\n                        value={strain.source}\r\n                        onChange={this.onBaseFieldChanged}\r\n                    />\r\n                    <TextItem\r\n                        label='Способ получения' // способ получения\r\n                        name='obtainingMethod'\r\n                        value={strain.obtainingMethod}\r\n                        onChange={this.onBaseFieldChanged}\r\n                    />\r\n\r\n                    {/** properties */}\r\n\r\n                    <div className='strain-form__properties properties'>\r\n                        {strain.properties.map((property) => (\r\n                            <PropertyItem\r\n                                key={property.propertyId}\r\n                                title={property.propertyName}\r\n                            >\r\n                                {property.ungroupedParameters?.map((param) => (\r\n                                    <FieldFromParam\r\n                                        key={param.id}\r\n                                        param={param}\r\n                                        onChange={(value, _) => {\r\n                                            param.value = value;\r\n                                            this.forceUpdate();\r\n                                        }}\r\n                                    />\r\n                                ))}\r\n\r\n                                {property.groups?.map((group) => (\r\n                                    <div\r\n                                        key={group.groupId}\r\n                                        style={{ border: '1px dashed' }}\r\n                                    >\r\n                                        {group.parameters.map((param) => (\r\n                                            <FieldFromParam\r\n                                                key={param.id}\r\n                                                param={param}\r\n                                                onChange={(value, _) => {\r\n                                                    param.value = value;\r\n                                                    this.forceUpdate();\r\n                                                }}\r\n                                            />\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </PropertyItem>\r\n                        ))}\r\n                    </div>\r\n                </form>\r\n\r\n                <div className='strain-adding__buttons form-buttons'>\r\n                    <button\r\n                        type='submit'\r\n                        className='form-buttons__submit-button form-button submit-button'\r\n                    >\r\n                        Добавить\r\n                    </button>\r\n                    <button\r\n                        type='button'\r\n                        className='form-buttons__cancel-button form-button cancel-button'\r\n                    >\r\n                        Отмена\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface FieldFromParamProps {\r\n    param: FacticalParameter;\r\n    onChange: (value: string, changed: FacticalParameter) => void;\r\n}\r\n\r\nfunction FieldFromParam({ param, onChange }: FieldFromParamProps) {\r\n    const props = {\r\n        label: param.formalParameter.value,\r\n        name: param.id.toString(),\r\n        value: param.value,\r\n        onChange: (value: string, fieldName?: string) => onChange(value, param),\r\n    };\r\n    if (param.formalParameter.parameterDataType.name === 'Date') {\r\n        return <DateItem {...props} />;\r\n    }\r\n    return <TextItem {...props} />;\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n    getAllGenera,\r\n    getAllStrains,\r\n    getAllStrainTypes as getAllTypes,\r\n} from '../../common/data_fetch';\r\nimport RequestError from '../../common/request_error';\r\nimport Strain, { Genus, StrainType } from '../../models/strain/strain';\r\n\r\ninterface State {\r\n    requestError?: RequestError;\r\n    isLoading: boolean;\r\n\r\n    strainList: Strain[];\r\n    typeList: StrainType[];\r\n    genusList: Genus[];\r\n}\r\n\r\nexport default class MicroorganismsCatalog extends React.Component<{}, State> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = { isLoading: false, strainList: [], typeList: [], genusList: [] };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n        try {\r\n            const [strainList, typeList, genusList] = await Promise.all([\r\n                getAllStrains(),\r\n                getAllTypes(),\r\n                getAllGenera(),\r\n            ]);\r\n            this.setState({ strainList, typeList, genusList });\r\n        } catch (error) {\r\n            this.setState({ requestError: error });\r\n        }\r\n        this.setState({ isLoading: false });\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, requestError } = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Загрузка данных...</p>;\r\n        }\r\n        if (requestError) {\r\n            return `Ошибка при получении данных: ${requestError.message}`;\r\n        }\r\n\r\n        const { strainList, typeList, genusList } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                штаммы\r\n                <pre>{JSON.stringify(strainList, null, 2)}</pre>\r\n                виды\r\n                <pre>{JSON.stringify(typeList, null, 2)}</pre>\r\n                рода\r\n                <pre>{JSON.stringify(genusList, null, 2)}</pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport axios from 'axios';\nimport React from 'react';\nimport GlobalState from '../__hack/global_state';\nimport Header from './Header/Header';\nimport BlockMenu, { ItemInfo } from './MainMenu/BlockMenu';\nimport StrainSavingForm from './MainMenu/StrainSavingForm';\nimport MicroorganismsCatalog from './MicroorganismsCatalog/MicroorganismsCatalog';\n\nconst blockMenuItems: ItemInfo[] = [\n    'Каталог микроорганизмов',\n    'Добавить штамм микроорганизма',\n    'Поиск и редактирование штаммов микроорганизмов',\n    'Редактирование свойств и параметров микроорганзимов',\n].map((item, i) => ({ id: i, label: item }));\n\ninterface State {\n    isBlockMenuActive: boolean;\n    activeMenuItem: ItemInfo;\n}\n\nexport default class App extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n        this.state = { isBlockMenuActive: true, activeMenuItem: blockMenuItems[0] };\n        axios.defaults.baseURL = 'http://localhost:8081';\n\n        GlobalState.state.update = () => {\n          this.forceUpdate()\n        }\n    }\n\n    async componentDidMount() {\n        // const axiosInst = axios.create({ baseURL: axios.defaults.baseURL + '/strain' });\n        // const strain = {\n        //     type: {\n        //         id: 1,\n        //     },\n        //     name: 'Lactococcus lactis С9-18-2',\n        //     collectionIndex: 'ИД-765',\n        //     dateReceiving: '1981-12-19T17:00:00.000Z',\n        //     source: 'Получен из штамма L.lactis 174',\n        //     obtainingMethod: 'Экспериментальная селекция',\n        //     creator: 'Крузенштерн И.Ф.',\n        //     dateAdded: '2021-04-11T20:49:10.990Z',\n        //     properties: [\n        //         {\n        //             propertyId: 1,\n        //             ungroupedParameters: [{ formalParameter: { id: 1 }, value: '44' }],\n        //             groups: [\n        //                 {\n        //                     groupId: 77,\n        //                     parameters: [\n        //                         { formalParameter: { id: 2 }, value: '100' },\n        //                         { formalParameter: { id: 3 }, value: '0.9' },\n        //                     ],\n        //                 },\n        //             ],\n        //         },\n        //     ],\n        // };\n        // const saveStrain = await axiosInst.post('/save', strain).catch((reason) => {\n        //     console.warn('reason:', reason);\n        // });\n        // console.log('save:', saveStrain);\n    }\n\n    private onMenuItemChoose = (item: ItemInfo) => {\n        this.setState({ activeMenuItem: item });\n    };\n\n    private chooseScreen() {\n        switch (this.state.activeMenuItem.id) {\n            case 0:\n                return <MicroorganismsCatalog />;\n            case 1:\n                return <StrainSavingForm strainId={2} />;\n            default:\n                return null;\n        }\n    }\n\n    render() {\n        const { isBlockMenuActive, activeMenuItem } = this.state;\n\n        return (\n            <>\n                <Header\n                    onMenuButtonClick={this.onMenuButtonClick}\n                    isMenuButtonActive={this.state.isBlockMenuActive}\n                />\n\n                <main className='main container'>\n                    <div className='main__content main-content'>\n                        {isBlockMenuActive ? (\n                            <BlockMenu\n                                items={blockMenuItems}\n                                activeItem={activeMenuItem}\n                                onChoose={this.onMenuItemChoose}\n                            />\n                        ) : null}\n\n                        {this.chooseScreen()}\n                    </div>\n                </main>\n            </>\n        );\n    }\n\n    private onMenuButtonClick = () => {\n        this.setState((prevState, _) => ({\n            isBlockMenuActive: !prevState.isBlockMenuActive,\n        }));\n    };\n}\n\n/*\n\n/microorganism_catalog\n/add_srain\n/edit_strain\n/strain_search\n/edit_properties\n\n*/\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}